{"version":3,"file":"moe-recaptcha.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/@polymer/lit-element/lib/updating-element.js","../node_modules/@polymer/lit-element/lit-element.js","../index.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\nexport const directive = (f) => {\n    directives.set(f, true);\n    return f;\n};\nexport const isDirective = (o) => typeof o === 'function' && directives.has(o);\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\nexport const rewritesStyleAttribute = (() => {\n    const el = document.createElement('div');\n    el.setAttribute('style', '{{bad value}}');\n    return el.getAttribute('style') !== '{{bad value}}';\n})();\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            // The actual previous node, accounting for removals: if a node is removed\n            // it will never be the previousNode.\n            let previousNode;\n            // Used to set previousNode at the top of the loop.\n            let currentNode;\n            while (walker.nextNode()) {\n                index++;\n                previousNode = currentNode;\n                const node = currentNode = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // If the attribute name contains special characters, lower-case\n                            // it so that on XML nodes with case-sensitive getAttribute() we\n                            // can still find the attribute, which will have been lower-cased\n                            // by the parser.\n                            //\n                            // If the attribute name doesn't contain special character, it's\n                            // important to _not_ lower-case it, in case the name is\n                            // case-sensitive, like with XML attributes like \"viewBox\".\n                            const attributeLookupName = (rewritesStyleAttribute && name === 'style') ?\n                                'style$' :\n                                /^[a-zA-Z-]*$/.test(name) ? name : name.toLowerCase();\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const nodeValue = node.nodeValue;\n                    if (nodeValue.indexOf(marker) < 0) {\n                        continue;\n                    }\n                    const parent = node.parentNode;\n                    const strings = nodeValue.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore((strings[i] === '') ? createMarker() :\n                            document.createTextNode(strings[i]), node);\n                        this.parts.push({ type: 'node', index: index++ });\n                    }\n                    parent.insertBefore(strings[lastIndex] === '' ?\n                        createMarker() :\n                        document.createTextNode(strings[lastIndex]), node);\n                    nodesToRemove.push(node);\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.nodeValue === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * previousSibling is being removed (thus it's not the\n                        //    `previousNode`)\n                        //  * previousSibling is not a Text node\n                        //\n                        // TODO(justinfagnani): We should be able to use the previousNode\n                        // here as the marker node and reduce the number of extra nodes we\n                        // add to a template. See\n                        // https://github.com/PolymerLabs/lit-html/issues/147\n                        const previousSibling = node.previousSibling;\n                        if (previousSibling === null || previousSibling !== previousNode ||\n                            previousSibling.nodeType !== Node.TEXT_NODE) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        this.parts.push({ type: 'node', index: index++ });\n                        nodesToRemove.push(node);\n                        // If we don't have a nextSibling add a marker node.\n                        // We don't have to check if the next node is going to be removed,\n                        // because that node will induce a new marker if so.\n                        if (node.nextSibling === null) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        currentNode = previousNode;\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.nodeValue.indexOf(marker, i + 1)) !== -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { reparentNodes } from './dom.js';\nimport { lastAttributeNameRegex, marker, nodeMarker, rewritesStyleAttribute } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            const close = s.lastIndexOf('>');\n            // We're in a text position if the previous string closed its last tag, an\n            // attribute position if the string opened an unclosed tag, and unchanged\n            // if the string had no brackets at all:\n            //\n            // \"...>...\": text position. open === -1, close > -1\n            // \"...<...\": attribute position. open > -1\n            // \"...\": no change. open === -1, close === -1\n            isTextBinding =\n                (close > -1 || isTextBinding) && s.indexOf('<', close + 1) === -1;\n            if (!isTextBinding && rewritesStyleAttribute) {\n                html = html.replace(lastAttributeNameRegex, (match, p1, p2, p3) => {\n                    return (p2 === 'style') ? `${p1}style$${p3}` : match;\n                });\n            }\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => (value === null ||\n    !(typeof value === 'object' || typeof value === 'function'));\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value.then !== undefined) {\n            this._commitPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.textContent = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value && this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    _commitPromise(value) {\n        this.value = value;\n        value.then((v) => {\n            if (this.value === value) {\n                this.setValue(v);\n                this.commit();\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this, this._options);\n        }\n        this._options = getOptions(newListener);\n        if (shouldAddListener) {\n            this.element.addEventListener(this.eventName, this, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        const listener = (typeof this.value === 'function') ?\n            this.value :\n            (typeof this.value.handleEvent === 'function') ?\n                this.value.handleEvent :\n                () => null;\n        listener.call(this.eventContext || this.element, event);\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport * from './lib/template-result.js';\nexport * from './lib/template.js';\nexport * from './lib/default-template-processor.js';\nexport * from './lib/template-instance.js';\nexport * from './lib/part.js';\nexport * from './lib/parts.js';\nexport * from './lib/dom.js';\nexport * from './lib/directive.js';\nexport * from './lib/render.js';\nexport * from './lib/template-factory.js';\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateResult } from './template-result.js';\nimport { Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n    }\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, there's no work to do.\n    if (styles.length === 0) {\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    litRender(result, container, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When rendering a TemplateResult, scope the template with ShadyCSS\n    if (container instanceof ShadowRoot && compatibleShadyCSSVersion &&\n        result instanceof TemplateResult) {\n        // Scope the element template one time only for this scope.\n        if (!shadyRenderSet.has(scopeName)) {\n            const part = parts.get(container);\n            const instance = part.value;\n            prepareTemplateStyles(container, instance.template, scopeName);\n        }\n        // Update styling if this is the initial render to this container.\n        if (!hasRendered) {\n            window.ShadyCSS.styleElement(container.host);\n        }\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// serializer/deserializers for boolean attribute\nconst fromBooleanAttribute = (value) => value !== null;\nconst toBooleanAttribute = (value) => value ? '' : null;\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = new Promise((resolve) => resolve(true));\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING = 1 << 3;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're _finalized.\n        this._finalize();\n        const attributes = [];\n        for (const [p, v] of this._classProperties) {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        }\n        return attributes;\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty('_classProperties')) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n        this._classProperties.set(name, options);\n        // Allow user defined accessors by not replacing an existing own-property\n        // accessor.\n        if (this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            get() { return this[key]; },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestPropertyUpdate(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     */\n    static _finalize() {\n        if (this.hasOwnProperty('_finalized') && this._finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor._finalize === 'function') {\n            superCtor._finalize();\n        }\n        this._finalized = true;\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        const props = this.properties;\n        // support symbols in properties (IE11 does not support this)\n        const propKeys = [\n            ...Object.getOwnPropertyNames(props),\n            ...(typeof Object.getOwnPropertySymbols === 'function')\n                ? Object.getOwnPropertySymbols(props)\n                : []\n        ];\n        for (const p of propKeys) {\n            // note, use of `any` is due to TypeSript lack of support for symbol in\n            // index types\n            this.createProperty(p, props[p]);\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options !== undefined && options.attribute;\n        return attribute === false\n            ? undefined\n            : (typeof attribute === 'string'\n                ? attribute\n                : (typeof name === 'string' ? name.toLowerCase()\n                    : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's `type`\n     * or `type.fromAttribute` property option.\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options && options.type;\n        if (type === undefined) {\n            return value;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const fromAttribute = type === Boolean\n            ? fromBooleanAttribute\n            : (typeof type === 'function' ? type : type.fromAttribute);\n        return fromAttribute ? fromAttribute(value) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options === undefined || options.reflect === undefined) {\n            return;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const toAttribute = options.type === Boolean\n            ? toBooleanAttribute\n            : (options.type &&\n                options.type.toAttribute ||\n                String);\n        return toAttribute(value);\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this.renderRoot = this.createRenderRoot();\n        this._saveInstanceProperties();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        for (const [p] of this.constructor\n            ._classProperties) {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        }\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        for (const [p, v] of this._instanceProperties) {\n            this[p] = v;\n        }\n        this._instanceProperties = undefined;\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Uses ShadyCSS to keep element DOM updated.\n     */\n    connectedCallback() {\n        if ((this._updateState & STATE_HAS_UPDATED)) {\n            if (window.ShadyCSS !== undefined) {\n                window.ShadyCSS.styleElement(this);\n            }\n        }\n        else {\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() { }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attrValue = ctor._propertyValueToAttribute(value, options);\n        if (attrValue !== undefined) {\n            const attr = ctor._attributeNameForProperty(name, options);\n            if (attr !== undefined) {\n                // Track if the property is being reflected to avoid\n                // setting the property again via `attributeChangedCallback`. Note:\n                // 1. this takes advantage of the fact that the callback is synchronous.\n                // 2. will behave incorrectly if multiple attributes are in the reaction\n                // stack at time of calling. However, since we process attributes\n                // in `update` this should not be possible (or an extreme corner case\n                // that we'd like to discover).\n                // mark state reflecting\n                this._updateState = this._updateState | STATE_IS_REFLECTING;\n                if (attrValue === null) {\n                    this.removeAttribute(attr);\n                }\n                else {\n                    this.setAttribute(attr, attrValue);\n                }\n                // mark state not reflecting\n                this._updateState = this._updateState & ~STATE_IS_REFLECTING;\n            }\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (!(this._updateState & STATE_IS_REFLECTING)) {\n            const ctor = this.constructor;\n            const propName = ctor._attributeToPropertyMap.get(name);\n            if (propName !== undefined) {\n                const options = ctor._classProperties.get(propName);\n                this[propName] =\n                    ctor._propertyValueFromAttribute(value, options);\n            }\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        if (name !== undefined) {\n            const options = this.constructor\n                ._classProperties.get(name) ||\n                defaultPropertyDeclaration;\n            return this._requestPropertyUpdate(name, oldValue, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Requests an update for a specific property and records change information.\n     * @param name {PropertyKey} name of requesting property\n     * @param oldValue {any} old value of requesting property\n     * @param options {PropertyDeclaration}\n     */\n    _requestPropertyUpdate(name, oldValue, options) {\n        if (!this.constructor\n            ._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n            return this.updateComplete;\n        }\n        // track old value when changing.\n        if (!this._changedProperties.has(name)) {\n            this._changedProperties.set(name, oldValue);\n        }\n        // add to reflecting properties set\n        if (options.reflect === true) {\n            if (this._reflectingProperties === undefined) {\n                this._reflectingProperties = new Map();\n            }\n            this._reflectingProperties.set(name, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Invalidates the element causing it to asynchronously update regardless\n     * of whether or not any property changes are pending. This method is\n     * automatically called when any registered property changes.\n     */\n    async _invalidate() {\n        if (!this._hasRequestedUpdate) {\n            // mark state updating...\n            this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n            let resolver;\n            const previousValidatePromise = this._updatePromise;\n            this._updatePromise = new Promise((r) => resolver = r);\n            await previousValidatePromise;\n            this._validate();\n            resolver(!this._hasRequestedUpdate);\n        }\n        return this.updateComplete;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    /**\n     * Validates the element by updating it.\n     */\n    _validate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        if (this.shouldUpdate(this._changedProperties)) {\n            const changedProperties = this._changedProperties;\n            this.update(changedProperties);\n            this._markUpdated();\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n        else {\n            this._markUpdated();\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() { return this._updatePromise; }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated DOM in the element's\n     * `renderRoot`. Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            for (const [k, v] of this._reflectingProperties) {\n                this._propertyToAttribute(k, this[k], v);\n            }\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) { }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) { }\n}\n/**\n * Maps attribute names to properties; for example `foobar` attribute\n * to `fooBar` property.\n */\nUpdatingElement._attributeToPropertyMap = new Map();\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement._finalized = true;\n/**\n * Memoized list of all class properties, including any superclass properties.\n */\nUpdatingElement._classProperties = new Map();\nUpdatingElement.properties = {};\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg } from 'lit-html/lit-html';\nexport class LitElement extends UpdatingElement {\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     * @returns {TemplateResult} Must return a lit-html TemplateResult.\n     */\n    render() { }\n}\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import {LitElement, html} from '@polymer/lit-element';\n\nexport default class MoeRecaptcha extends LitElement {\n\n  static get properties() {\n    return {\n      version: {type: Number},\n      sitekey: {type: String},\n      size: {type: String},\n      badge: {type: String},\n      recaptchaId: {type: Number},\n      token: {type: String},\n      executionPromise: {type: Object},\n      executionPromiseResolve: {type: Function},\n      executionPromiseReject: {type: Function},\n    };\n  }\n\n  constructor() {\n    super();\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has('version') && this.version !== 2 && this.version !== 3) {\n      throw new Error('moe-recaptcha version must be either 2 or 3');\n    }\n  }\n\n  render() {\n    return html`\n<style>:host{display:block;}</style>\n`;\n  }\n\n  /**\n   * @returns {Promise<void>}\n   */\n  load(container) {\n    const FETCHING = `__fetchingGrecaptchaLibrary${this.version}__`;\n    const CALLBACK = `__onloadGrecaptchaCallback${this.version}__`;\n    if (!window[FETCHING]) {\n      return new Promise((resolve, reject) => {\n        window[FETCHING] = true;\n        window[CALLBACK] = () => {\n          window[FETCHING] = false;\n\n          if (parseInt(this.version) === 2) {\n            this.recaptchaId = grecaptcha.render(container, {\n              sitekey: this.sitekey,\n              callback: this._responseCallback.bind(this),\n              'error-callback': this._errorCallback.bind(this),\n              'expired-callback': this._expiredCallback.bind(this),\n              isolated: true,\n              size: this.size,\n              badge: this.badge,\n            });\n          }\n\n          resolve();\n        };\n\n        const script = document.createElement('script');\n        const apiUrl = this.version === 2 ?\n          `//www.google.com/recaptcha/api.js?onload=${CALLBACK}&render=explicit` :\n          `//www.google.com/recaptcha/api.js?onload=${CALLBACK}&render=${this.sitekey}`;\n        script.setAttribute('id', 'grecaptchaLibrary');\n        script.setAttribute('src', apiUrl);\n        script.onerror = (err) => {\n          console.error(err);\n          window[FETCHING] = false;\n          reject(err);\n        };\n        document.head.appendChild(script);\n      });\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  /**\n   * @returns {Promise<String>}\n   */\n  execute(...args) {\n    if (this.version === 2) {\n      return this._executev2();\n    } else if (this.version === 3) {\n      return this._executev3(...args);\n    }\n  }\n\n  reset() {\n    if (this.version === 2 && this.recaptchaId) {\n      grecaptcha.reset(this.recaptchaId);\n    }\n  }\n\n  _executev2() {\n    if (this.recaptchaId && grecaptcha.getResponse(this.recaptchaId)) {\n      return Promise.resolve(grecaptcha.getResponse(this.recaptchaId));\n    }\n\n    this.executionPromise = new Promise((resolve, reject) => {\n      this.executionPromiseResolve = resolve;\n      this.executionPromiseReject = reject;\n    });\n    grecaptcha.execute(this.recaptchaId);\n    return this.executionPromise;\n  }\n\n  _executev3(action) {\n    return grecaptcha.execute(this.sitekey, {action});\n  }\n\n  _responseCallback(token) {\n    this.token = token;\n    this.executionPromiseResolve(token);\n  }\n\n  _errorCallback(err) {\n    console.error(err);\n    this.executionPromiseReject(err);\n  }\n\n  _expiredCallback() {\n    console.log('recaptcha expired');\n    this.reset();\n  }\n}\n\nwindow.customElements.define('moe-recaptcha', MoeRecaptcha);\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","node","n","nextSibling","removeChild","noChange","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","rewritesStyleAttribute","el","document","createElement","setAttribute","getAttribute","Template","[object Object]","result","element","this","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","createTreeWalker","previousNode","currentNode","nextNode","nodeType","hasAttributes","attributes","count","i","length","value","indexOf","stringForPart","strings","name","lastAttributeNameRegex","exec","attributeLookupName","test","toLowerCase","split","push","type","removeAttribute","tagName","nodeValue","parent","parentNode","lastIndex","insertBefore","createMarker","createTextNode","previousSibling","Node","TEXT_NODE","isTemplatePartActive","part","createComment","TemplateInstance","processor","options","_parts","values","setValue","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","TemplateResult","l","html","isTextBinding","s","close","lastIndexOf","replace","match","p1","p2","p3","innerHTML","getHTML","isPrimitive","AttributeCommitter","dirty","_createPart","AttributePart","text","v","Array","isArray","Symbol","iterator","t","_getValue","comitter","committer","directive","NodePart","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","_commitNode","_commitIterable","then","_commitPromise","clear","textContent","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","event","handleEvent","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","Map","set","getTemplateElement","walkerNodeFilter","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","DOCUMENT_FRAGMENT_NODE","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","nativeShadow","querySelector","removes","fromBooleanAttribute","toBooleanAttribute","notEqual","old","defaultPropertyDeclaration","attribute","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_changedProperties","_reflectingProperties","initialize","observedAttributes","_finalize","p","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","Object","getPrototypeOf","k","prototype","key","defineProperty","oldValue","_requestPropertyUpdate","configurable","enumerable","_finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","Boolean","toAttribute","renderRoot","createRenderRoot","_saveInstanceProperties","constructor","attachShadow","mode","styleElement","requestUpdate","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","_invalidate","_valueHasChanged","updateComplete","_hasRequestedUpdate","resolver","previousValidatePromise","r","_validate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","LitElement","templateResult","render","localName","hasRendered","assign","appendInto","litRender","cacheKey","shadyTemplateFactory","ShadowRoot","host","MoeRecaptcha","version","Number","sitekey","badge","recaptchaId","token","executionPromise","executionPromiseResolve","Function","executionPromiseReject","FETCHING","CALLBACK","reject","parseInt","grecaptcha","callback","_responseCallback","bind","error-callback","_errorCallback","expired-callback","_expiredCallback","isolated","script","apiUrl","onerror","err","error","head","args","_executev2","_executev3","reset","getResponse","execute","action","log","define"],"mappings":"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"}